import { Eventing } from "./Eventing";
import { Sync } from "./Sync";
import { Attributes } from "./Attributes";
import { AxiosResponse } from "axios";

export interface UserProps {
  id?: number;
  name?: string;
  age?: number;
}

const rootUrl = "http://localhost:3000/users";

export class User {
  public events: Eventing = new Eventing(); //hard code events library on User
  public sync: Sync<UserProps> = new Sync<UserProps>(rootUrl);

  public attributes: Attributes<UserProps>;

  constructor(attrs: UserProps) {
    this.attributes = new Attributes<UserProps>(attrs);
  } //vì Attributes cần argument mà argument đó lại pass vào từ constructor của user nên cần set up kiểu này. Khi mà ko cần argument từ constructor của User (như Eventing) thì có thể initialize trên cùng 1 dòng OK

  /*on(eventName: string, callback: Callback): void {
    this.events.on(eventName, callback); //NG vì nếu có update gì ở class Eventing thì sẽ phải quay lại tất cả các class đang dùng Eventing để update theo => nên dùng getter
  } */

  get on() {
    return this.events.on; //not calling on() here, just a reference to the events.on method, như thế có thể invoke lúc nào tuỳ mình muốn
  }

  get trigger() {
    return this.events.trigger;
  }

  get get() {
    return this.attributes.get;
  }

  set(update: UserProps): void {
    this.attributes.set(update);
    this.events.trigger("change"); //notify the rest of the application that something has changed
  }

  fetch(): void {
    const id = this.attributes.get("id");
    if (typeof id !== "number") {
      throw Error("Cannot fetch without an id");
    }

    this.sync.fetch(id).then((res: AxiosResponse): void => {
      this.set(res.data); //ko pass qua this.set mà pass gọi trực tiếp set() của attributes vì ko muốn trigger event nào trường hợp này cả.
    });
  }

  save(): void {
    this.sync
      .save(this.attributes.getAll())
      .then((res: AxiosResponse): void => {
        this.trigger("save");
      })
      .catch(() => {
        this.trigger("err");
      });
  }
}
